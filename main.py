from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import uuid

TOKEN = '6459395731:AAFeLJNQuhx-Op1Hj10bbzQLnEU6IqKIBGA'
ADMIN_CHAT_ID = 971204608  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram

def get_base_reply_keyboard():
    keyboard = [
        ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω', '–ö–æ—Ä–∑–∏–Ω–∞'],
        ['–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–∞—Ç—å –≤–∫—É—Å–Ω—ã–µ —Å–ª–∞–¥–æ—Å—Ç–∏, "
        "–Ω–æ –∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ö–æ–Ω–∫—É—Ä—Å\", —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã.\n"
        "2Ô∏è‚É£ –•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –µ—â—ë? –ò—Å—Å–ª–µ–¥—É–π –Ω–∞—à–µ –º–µ–Ω—é –∏ –¥–æ–±–∞–≤—å –≤ –∫–æ—Ä–∑–∏–Ω—É –≤—Å—ë, —á—Ç–æ –ø–æ–∂–µ–ª–∞–µ—à—å.\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.\n"
        "4Ô∏è‚É£ –°–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
        "–£–¥–∞—á–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ! –ù–∞–¥–µ–µ–º—Å—è, —Ç—ã –Ω–∞–π–¥—ë—à—å —É –Ω–∞—Å –º–Ω–æ–≥–æ –≤–∫—É—Å–Ω–æ–≥–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é."
    )
    sent_message = await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_message)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['message_ids'] = [sent_message.message_id]

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    question_message = "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∑–∞–∫–∞–∑–∞—Ç—å?"
    keyboard = [
        [InlineKeyboardButton("üçì–ö–ª—É–±–Ω–∏–∫–∞ –≤ —à–æ–∫–æ–ª–∞–¥–µ", callback_data='strawberry')],
        [InlineKeyboardButton("üçå–ë–∞–Ω–∞–Ω –≤ —à–æ–∫–æ–ª–∞–¥–µ", callback_data='banana')],
        [InlineKeyboardButton("üõí–ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')],
        [InlineKeyboardButton("üéÅ–ö–æ–Ω–∫—É—Ä—Å", callback_data='competition')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=question_message, reply_markup=reply_markup)

async def handle_competition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
    keyboard = [
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='back_to_shop')],
        [InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='cart')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
    if context.user_data.get('has_participated', False):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª, —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º
        await query.edit_message_text(
            text="–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ. –£—á–∞—Å—Ç–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=reply_markup
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart = context.user_data.setdefault('cart', [])
    cart.append("–£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ")
    context.user_data['in_competition'] = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å
    await query.edit_message_text(
        text="–£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.",
        reply_markup=reply_markup
    )


async def send_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    if 'message_ids' in context.user_data and len(context.user_data['message_ids']) > 1:
        for msg_id in context.user_data['message_ids'][:-1]:  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ)
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–ª—å–∫–æ message_id –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['message_ids'] = context.user_data['message_ids'][-1:]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    keyboard = [
        [InlineKeyboardButton("üçì–ö–ª—É–±–Ω–∏–∫–∞ –≤ —à–æ–∫–æ–ª–∞–¥–µ", callback_data='strawberry')],
        [InlineKeyboardButton("üçå–ë–∞–Ω–∞–Ω –≤ —à–æ–∫–æ–ª–∞–¥–µ", callback_data='banana')],
        [InlineKeyboardButton("üõí–ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_message = await context.bot.send_message(chat_id=chat_id, text='–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å?', reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –∑–∞–±—ã–≤–∞—è –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = [sent_message.message_id]
    else:
        context.user_data['message_ids'].append(sent_message.message_id)


async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')],
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_shop')],
    ]
    if query.data == 'strawberry':
        keyboard[0:0] = [  # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—É–±–Ω–∏–∫–∏ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –∫–æ—Ä–∑–∏–Ω—ã
            [InlineKeyboardButton("6 —à—Ç—É–∫", callback_data='strawberry_6')],
            [InlineKeyboardButton("9 —à—Ç—É–∫", callback_data='strawberry_9')],
            [InlineKeyboardButton("16 —à—Ç—É–∫", callback_data='strawberry_16')],
        ]
    elif query.data == 'banana':
        keyboard[0:0] = [  # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–Ω–∞–Ω–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –∫–æ—Ä–∑–∏–Ω—ã
            [InlineKeyboardButton("3 —à—Ç—É–∫–∏", callback_data='banana_3')],
            [InlineKeyboardButton("6 —à—Ç—É–∫", callback_data='banana_6')],
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=reply_markup)


product_descriptions = {
    "strawberry_6": "–ö–ª—É–±–Ω–∏–∫–∞ –≤ —à–æ–∫–æ–ª–∞–¥–µ 6 —à—Ç—É–∫",
    "strawberry_9": "–ö–ª—É–±–Ω–∏–∫–∞ –≤ —à–æ–∫–æ–ª–∞–¥–µ 9 —à—Ç—É–∫",
    "strawberry_16": "–ö–ª—É–±–Ω–∏–∫–∞ –≤ —à–æ–∫–æ–ª–∞–¥–µ 16 —à—Ç—É–∫",
    "banana_3": "–ë–∞–Ω–∞–Ω –≤ —à–æ–∫–æ–ª–∞–¥–µ 3 —à—Ç—É–∫–∏",
    "banana_6": "–ë–∞–Ω–∞–Ω –≤ —à–æ–∫–æ–ª–∞–¥–µ 6 —à—Ç—É–∫",
}

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    try:
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    product_code = query.data
    product_description = product_descriptions.get(product_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")

    cart = context.user_data.setdefault('cart', [])
    cart.append(product_description)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='back_to_shop')],
        [InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    sent_message = await context.bot.send_message(chat_id=query.message.chat_id, text=f"{product_description} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = [sent_message.message_id]
    else:
        context.user_data['message_ids'].append(sent_message.message_id)


async def handle_back_to_shop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É)
    try:
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ callback_query
    chat_id = query.message.chat_id

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üçì–ö–ª—É–±–Ω–∏–∫–∞ –≤ —à–æ–∫–æ–ª–∞–¥–µ", callback_data='strawberry')],
        [InlineKeyboardButton("üçå–ë–∞–Ω–∞–Ω –≤ —à–æ–∫–æ–ª–∞–¥–µ", callback_data='banana')],
        [InlineKeyboardButton("üõí–ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é
    sent_message = await context.bot.send_message(chat_id=chat_id, text='–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å?', reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = [sent_message.message_id]
    else:
        context.user_data['message_ids'].append(sent_message.message_id)


async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    cart = context.user_data.get('cart', [])
    if cart:
        cart_items = "\n".join([f"- {item}" for item in cart])
        text = f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_items}"
        keyboard = [
            [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')],
            [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='back_to_shop')],  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
        ]
    else:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        keyboard = [
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='back_to_shop')],  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)


async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['cart'] = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
    await query.edit_message_text(text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.")


async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['awaiting_name'] = True

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∏–º—è
    await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")

    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º—è –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
    # await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω":
        await send_welcome_message(update, context)
    elif text == "–ö–æ—Ä–∑–∏–Ω–∞":
        await view_cart(update, context)
    elif text == "–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await update.message.reply_text('–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É: @chokostrawberryadmin')
    elif 'awaiting_name' in context.user_data and context.user_data['awaiting_name']:
        context.user_data['name'] = text
        context.user_data['awaiting_name'] = False
        context.user_data['awaiting_date'] = True
        await update.message.reply_text('–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –¥–µ–ª–∞–µ–º –∑–∞–∫–∞–∑? (–ø—Ä–∏–º–µ—Ä: 24.07.2024)')
    elif 'awaiting_date' in context.user_data and context.user_data['awaiting_date']:
        context.user_data['date'] = text
        context.user_data['awaiting_date'] = False
        context.user_data['awaiting_nickname'] = True
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à @–Ω–∏–∫ –≤ Telegram –¥–ª—è —Å–≤—è–∑–∏:')
    elif 'awaiting_nickname' in context.user_data and context.user_data['awaiting_nickname']:
        context.user_data['nickname'] = text
        context.user_data['awaiting_nickname'] = False
        keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text('–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=reply_markup)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å


async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    contact = update.message.contact
    if contact:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name = context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        date = context.user_data.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        nickname = context.user_data.get('nickname', '–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω')
        unique_id = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = "\n".join(context.user_data.get('cart', ['–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞']))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if context.user_data.get('in_competition', False):
            unique_id = str(uuid.uuid4())[:8]  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
            message_text_admin = (f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {name} ({nickname})!\n"
                                  f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {contact.phone_number}\n"
                                  f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {date}\n"
                                  f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫–∞–∑–∞:\n{cart_items}\n"
                                  f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞üéÇ: {unique_id}")
            context.user_data['has_participated'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
        else:
            message_text_admin = (f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {name} ({nickname})!\n"
                                  f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {contact.phone_number}\n"
                                  f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {date}\n"
                                  f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫–∞–∑–∞:\n{cart_items}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message_text_admin)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        thank_you_message = '–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É! –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –µ–≥–æ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–µ.'

        # –ï—Å–ª–∏ –±—ã–ª –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if unique_id:
            thank_you_message += f'\n–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞: {unique_id}'

        await update.message.reply_text(thank_you_message, reply_markup=get_base_reply_keyboard())

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –∫—Ä–æ–º–µ —Ñ–ª–∞–≥–∞ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
        user_has_participated = context.user_data.pop('has_participated', False)
        context.user_data.clear()
        if user_has_participated:
            context.user_data['has_participated'] = True
        context.user_data.pop('in_competition',
                              None)  # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω


if __name__ == '__main__':
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(handle_choice, pattern='^(strawberry|banana)$'))
    application.add_handler(CallbackQueryHandler(handle_quantity, pattern=r'^(strawberry_|banana_)\d+$'))
    application.add_handler(CallbackQueryHandler(view_cart, pattern='^cart$'))
    application.add_handler(CallbackQueryHandler(clear_cart, pattern='^clear_cart$'))
    application.add_handler(CallbackQueryHandler(checkout, pattern='^checkout$'))
    application.add_handler(CallbackQueryHandler(handle_back_to_shop, pattern='^back_to_shop$'))
    application.add_handler(CallbackQueryHandler(handle_competition, pattern='^competition$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))

    application.run_polling()



